<% @body_id = "article" %>
<% @title = "【Ruby】ファイルの読み書きと正規表現で書き換えて保存するサンプルコード" %>
<% @description = "AtomでMarkdownから出力したHTMLファイルには余計なidやclassがついてきて、それを自分のブログに合わせたHTMLに変換するのが大変だったため、Rubyで変換して新規ファイルに保存するスニペットを書いてみました。" %>
<% @page_number = "page8" %>

<div id="wrap">
  <div class="content">
    <div class="text-content">

      <div class="text-title">
        <h1><%= @title %></h1>
      </div>
      <div class="posted-date-area"><p>投稿日：2019/1/5</p></div>

      <p>AtomでMarkdownから出力したHTMLファイルには余計なidやclassがついてきて、それを自分のブログに合わせたHTMLに手作業で変換するのが大変だったので、Rubyで一括変換して新規ファイルに保存するスニペットを書いてみました。</p>
      <p>Atomの設定から出力するHTMLファイルを編集できれば一番良いのですが、調べても見つかりませんでした。。</p>
      <div class="text-sub-title">
        <h2 class="sub-title-border">&nbsp;ファイルの読み書きのやり方</h2>
      </div>
      <p>ファイルの読み書きにはFileクラスのopenメソッドを使います。<br>書式は
<pre class="prettyprint linenums"><code>File.open("ファイルのパス", "オプション")
</code></pre>
<br>で、第二引数にオプションの設定ができます。<br>第二引数のそれぞれの値と設定は</p>
      <div class="list-border"><ul>
        <li>"w" → 書き込み・設定したファイルがあれば上書き(元の中身は消える)、無ければ新規作成</li>
        <li>"r" → 読み込み</li>
        <li>"a" → 設定したファイルに追記する(最後の行に追記、無ければ新規作成)</li>
        <li>"w+" → +をつけると読み書き両方できるようになる</li>
        <li>"r+" → 上と同じ</li>
        <li>"a+" → 追記に加えて読み込みもできる</li>
      </ul></div>
      <p>という感じです。</p>
      <p>簡単な使い方一覧</p>
      <pre class="prettyprint linenums"><code>w_file = File.open("/file_path/test1.html", "w")
r_file = File.open("/file_path/test2.html", "r")

w_file.write("hello") #-&gt; helloと上書き
r_file.read #-&gt; ファイルの中身を取得(string)

w_file.read #-&gt; openの第二引数がwのため、readはエラー
r_file.write #-&gt; 同じく第二引数がrのため、writeはエラー

# ブロックも使える
# ブロックを使うと、自動的にfileはcloseされる
File.open("/file_path/test1.html", "w") do |w_file|
  w_file.write("hello")
end</code></pre>
      <div class="text-sub-title">
        <h2 class="sub-title-border">&nbsp;サンプルコード</h2>
      </div>
      <p>既存のHTMLファイルを取得し、中身を正規表現で書き換えて新規ファイルに書き換えた内容を保存します。<br>今回はHTMLタグ(h1とh2)をそれぞれ自分のサイトに合わせたタグに置き換えています。</p>
      <pre class="prettyprint linenums"><code>
def replace_html_tag(args)
  File.open(args[:write_file_path], "w") do |write_file|
    File.open(args[:read_file_path], "r") do |read_file|
      html = read_file.read
      write_file.write(html.gsub(%r@&lt;h1.*?&gt;@, "&lt;div class="text-title"&gt;&lt;h1&gt;")
                           .gsub(%r@&lt;h2.*?&gt;@, "&lt;div class="text-sub-title"&gt;&lt;h2&gt;")
                           .gsub(%r@&lt;"/"h1&gt;@, "&lt;"/"h1&gt;&lt;"/"div&gt;")
                           .gsub(%r@&lt;"/"h2&gt;@, "&lt;"/"h2&gt;&lt;"/"div&gt;"))
    end
  end
end

replace_html_tag(
  :write_file_path =&gt; "/file_path/test1.html",
  :read_file_path  =&gt; "/file_path/test2.html"
)
      </code></pre>
      <p>※ハイライトのためタグのスラッシュをコメントアウトしています。</p>
      <p>htmlという変数に格納したファイルの中身をgsubで置き換え、その返り値をまたgsubで置き換えというのをメソッドチェーンで繰り返しています。 </p>
      <p>全体的に冗長な気が...正規表現とそのメソッドがあんまり使い慣れてないのでもっと簡潔に書ける気がします。。。。<br>あと、ついでに引数の順番に依存しないようハッシュを用いて渡すテクニック(?)を使ってます。</p>
      <p>Fileクラスの使い方と使用例はほんの一部ですが、他にも様々な使い方ができると思います。 </p>

    </div>
  </div>
</div>
